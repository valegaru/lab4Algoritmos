(()=>{"use strict";const t=t=>{return e=void 0,n=void 0,i=function*(){try{return yield fetch("https://rickandmortyapi.com/api/character/"+t).then((t=>t.json()))}catch(t){console.error(t)}},new((r=void 0)||(r=Promise))((function(t,a){function s(t){try{c(i.next(t))}catch(t){a(t)}}function o(t){try{c(i.throw(t))}catch(t){a(t)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof r?n:new r((function(t){t(n)}))).then(s,o)}c((i=i.apply(e,n||[])).next())}));var e,n,r,i};var e;!function(t){t.image="image",t.name="name",t.uid="uid",t.status="status",t.species="species",t.type="type",t.origin="origin",t.nameoffirstepisode="nameoffirstepisode"}(e||(e={}));class n extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}static get observedAttributes(){return Object.keys({image:null,name:null,uid:null,status:null,species:null,type:null,origin:null,nameoffirstepisode:null})}attributeChangedCallback(t,n,r){t===e.uid?this.uid=r?Number(r):void 0:this[t]=r,this.render()}connectedCallback(){this.render()}render(){this.shadowRoot&&(this.shadowRoot.innerHTML=`\n      <section>\n        <img src="${this.image}"><img>\n        <h1><b>Name:</b> ${this.name}</h1>\n        <p><b>Status:</b> ${this.status}</p>\n        <p><b>Species:</b> ${this.species} years old</p>\n        <p><b>Type:</b> ${this.type}</p>\n        <p><b>Origin:</b> ${this.origin}</p>\n        <p><b>First Episode:</b> ${this.nameoffirstepisode}</p>\n        </section>\n        `)}}customElements.define("my-character",n);var r=function(t,e,n,r){return new(n||(n=Promise))((function(i,a){function s(t){try{c(r.next(t))}catch(t){a(t)}}function o(t){try{c(r.throw(t))}catch(t){a(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,o)}c((r=r.apply(t,e||[])).next())}))};class i extends HTMLElement{constructor(){super(),this.characters=[],this.characterCountInput=null,this.charactersContainer=null,this.attachShadow({mode:"open"})}connectedCallback(){this.render()}render(){if(this.shadowRoot){this.shadowRoot.innerHTML='\n                <label for="characterCount">Number of Characters to Show:</label>\n                <input type="number" id="characterCount" name="characterCount" min="1" placeholder="Enter number of characters">\n                <button id="showCharactersButton">Show Characters</button>\n                <div id="charactersContainer"></div>\n            ',this.characterCountInput=this.shadowRoot.querySelector("#characterCount");const t=this.shadowRoot.querySelector("#showCharactersButton");this.charactersContainer=this.shadowRoot.querySelector("#charactersContainer"),t&&t.addEventListener("click",this.handleShowCharacters.bind(this))}}handleShowCharacters(){return r(this,void 0,void 0,(function*(){if(this.characterCountInput&&this.charactersContainer){const e=parseInt(this.characterCountInput.value,10);if(!isNaN(e)){this.charactersContainer.innerHTML="";for(let n=1;n<=e;n++){const e=yield t(n),r=yield this.getFirstEpisodeName(e.episode[0]);this.renderCharacter(e,r)}}}}))}getFirstEpisodeName(t){return r(this,void 0,void 0,(function*(){try{return(yield fetch(t).then((t=>t.json()))).name}catch(t){return console.error("Error fetching episode data:",t),"Unknown"}}))}renderCharacter(t,e){if(this.charactersContainer){const n=document.createElement("my-character");n.setAttribute("image",t.image||"not declared"),n.setAttribute("name",t.name||"not declared"),n.setAttribute("status",t.status||"not declared"),n.setAttribute("species",t.species||"not declared"),n.setAttribute("type",t.type||"not declared"),n.setAttribute("origin",t.origin.name||"not declared"),n.setAttribute("nameoffirstepisode",e||"not declared"),this.charactersContainer.appendChild(n)}}}customElements.define("app-container",i)})();