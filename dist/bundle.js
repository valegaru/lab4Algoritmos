(()=>{"use strict";const e=e=>{return t=void 0,n=void 0,s=function*(){try{return yield fetch("https://rickandmortyapi.com/api/character/"+e).then((e=>e.json()))}catch(e){console.error(e)}},new((i=void 0)||(i=Promise))((function(e,o){function r(e){try{c(s.next(e))}catch(e){o(e)}}function a(e){try{c(s.throw(e))}catch(e){o(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof i?n:new i((function(e){e(n)}))).then(r,a)}c((s=s.apply(t,n||[])).next())}));var t,n,i,s};var t;!function(e){e.image="image",e.name="name",e.uid="uid",e.status="status",e.species="species",e.type="type",e.origin="origin",e.nameoffirstepisode="nameoffirstepisode"}(t||(t={}));class n extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}static get observedAttributes(){return Object.keys({image:null,name:null,uid:null,status:null,species:null,type:null,origin:null,nameoffirstepisode:null})}attributeChangedCallback(e,n,i){e===t.uid?this.uid=i?Number(i):void 0:this[e]=i,this.render()}connectedCallback(){this.render()}render(){this.shadowRoot&&(this.shadowRoot.innerHTML=`\n      <section>\n        <img src="${this.image}"><img>\n        <h1><b>Name:</b> ${this.name}</h1>\n        <p><b>Status:</b> ${this.status}</p>\n        <p><b>Species:</b> ${this.species} years old</p>\n        <p><b>Type:</b> ${this.type}</p>\n        <p><b>Origin:</b> ${this.origin}</p>\n        <p><b>First Episode:</b> ${this.nameoffirstepisode}</p>\n        </section>\n        `)}}customElements.define("my-character",n);var i=function(e,t,n,i){return new(n||(n=Promise))((function(s,o){function r(e){try{c(i.next(e))}catch(e){o(e)}}function a(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,a)}c((i=i.apply(e,t||[])).next())}))};class s extends HTMLElement{constructor(){super(),this.characters=[],this.attachShadow({mode:"open"})}connectedCallback(){return i(this,void 0,void 0,(function*(){for(let t=1;t<=15;t++){const n=yield e(t),i=yield this.getFirstEpisodeName(n.episode[0]);this.render(Object.assign(Object.assign({},n),{nameoffirstepisode:i}))}}))}getFirstEpisodeName(e){return i(this,void 0,void 0,(function*(){try{return(yield fetch(e).then((e=>e.json()))).name}catch(e){return console.error("Error fetching episode data:",e),"Unknown"}}))}render(e){this.shadowRoot&&(this.shadowRoot.innerHTML+=`<my-character\n                image='${e.image||"not declared"}'\n                name='${e.name||"not declared"}'\n                status='${e.status||"not declared"}'\n                species='${e.species||"not declared"}'\n                type='${e.type||"not declared"}'\n                origin='${e.origin.name||"not declared"}'\n                nameoffirstepisode='${e.nameoffirstepisode||"not declared"}'></my-character>`)}}customElements.define("app-container",s)})();